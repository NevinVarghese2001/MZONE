angular
-------

npm- node package manager   npm -v

install
     - npm i -g @angular/cli@latest

project creation 
    -ng new projectname

running command
    -ng serve --open     ng s -o     

Angular technologies
--------------------
html
css
typescript -strictly typed

number :any
transpilling- browser convert ts code to js while running

npm i-install node module

angular configuration
---------------------
browser list -
editor config-
git ignore-to ignore unwanted files while uploading to git 
angular.json-angular project and angular cli configuration
karma.config- tool used to testing of website
packagelock.json-like a copy of package.json
package.json-used to manage third party libraries
readme.md- to read to understand details aoubt the project
tsconfig.app.json-typescript configuration files
node modules- 


assets- folder use to save images and other datas used in project


project
-------
root module
  -root component
      -we can create sub component inside the root module
  -sub modules
      -components


module    = ts file manage all the components inside that module
component = ts , html , css 
              -selector used to display the component 

        
word starts with @ are decorators that used to store metadata


create new component
    -ng generate component componentname
    -ng g c first     

in index.html only one component works that is root component
we can call other sub components in root component           


WORKING cycle of angular component
----------------------------------
constructor -->ngOnInit-->other methods

data binding in angular
-----------------------
ts - component
html - view

1-One way binding
-----------------
  1.1 ts to html (component to view data sharing)
    
      1.1.1 -string interpollattion  {{}}
      1.1.2 -property binding [property_name]="data"

  1.2 html to ts (view to component data sharing)
      1.2.1 -event binding (eventname)="methods()"  
      1.2.2 -$event binding (eventname)="method($event)"
      1.2.3 -event binding with template rendering variable  #variableName

2-Two way binding
-----------------
  2.1 ngModel [(ngModel)]="variable"
      
      -FormModule -module used to apply ngModel


Path setting in Angular
-----------------------
   path set in root module routing file
   each file need different paths 
   landimg page path is ""(empty)

Redirection in Angular
----------------------
   method - navigateByUrl(path)
   class  - Router
   module - AppRoutingModule


   folder - file -class -method 
   package  module


Dependency Injection
--------------------
to use a method of class in another class
 
in constructor   

            accessSpecifier referance:ClassName
            
            access specifier - private/ public
             -private :can use only in the injected class
             -public  :can use in the injected class and other classes in the file 


Angular Services
----------------

its a file in angular 
all components can access the content of the Service file

-create  ng g s filename


Angular Dierectives
-------------------
used to manipulate DOM

1-component Dierectives

2-Structural Dierectives
      -*ngFor
      -*ngIf
      
3-Atribute Dierectives
      -[ngClass]




Form Validation In Angular
--------------------------

form creation in angular
     1-template driven form
     2-model driven form

Model Driven Form
-----------------

-reactive form
      -ReactiveFormsModule  -module used to build model form

      -a model contain -form group
                       -array
                       -controller



local storage in angular
------------------------
C-CREATE-  localStorage.setItem()
R-READ-    localStorage.getItem()
U-UPDATE-  localStorage.setItem()
D-DELETE-  localStorage.removeItem()



Child parent Communication in Angular
-------------------------------------
parent to child data sharing-
                         @Input()-decorator used to share data from parent to child
                          
child to parent data sharing-
                         @Output()-decorator used to share data from child to parent

date and time in Angular
------------------------
date - class used to access current date in Angular

Angular Pipes
-------------
used to convert datas to another formate

Event creation in Angular (user defined events)
-------------------------
EventEmitter- class used to create events

emit() -method used to specify when the event happens



API creation In angular
-----------------------
HttpClientModule  -module
HttpClient        -class

methods
-------
get post put patch delete

-----------------------------------
asynchronous in js 

        promise - then()
                - catch()

asynchronous in ts        rxjs(reactive extension for javascript)
  
        observable - subscribe()
                   - catch()
----------------------------------

Header creation in Angular
--------------------------

HttpHeaders - class used to generate Heades 


Lazy Loading
------------

technology used to create Lazy loaded module for  faster Loading of high traffic pages

ng  g module modulename --route modulename --module app.module

-all product view
-single product view
-edit product
-delete product
-add new product



jsonserver
----------
 to run json files
 npm i --save json-server

 npx json-server --watch filename --post 3000

Access Params from url
----------------------

ActivatedRout  - class used to access Params
Params  - method used to access Params


Pipe creation in Angular
------------------------
 ng g pipe pipeName

 transform(value,filterstring,propName)

 value = pipe applying data
 filterstring =keyword used to filter data
 propName = filter applying property in data 


 data sharing from module to module
 ----------------------------------
 Behaviour Subject - rxjs  -reactive extension for js 
  1-import Behaviour Subject
  2-create an object of Behaviour Subject
  3-send the data using next method
  4-access data using subscribe
                             